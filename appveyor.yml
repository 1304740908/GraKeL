# AppVeyor.com is a Continuous Integration service to build and run tests under
# Windows

environment:
  global:
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\ci_scripts\\appveyor\\run_with_env.cmd"
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script interpreter
    # See: http://stackoverflow.com/a/13751649/163740
    ENSURE_PYNAUTY: .\ci_scripts\appveyor\ensure_pynauty.py
    WHEELHOUSE_UPLOADER_USERNAME: ysig
    MODULE: grakel
    PROJECT_NAME: GraKeL
    CLOUD_STORAGE: LOCAL

  matrix:
    - PYTHON: C:\python34-x64
      PYTHON_VERSION: "3.4.3"
      PYTHON_ARCH: "64"
      MSYS: C:\msys64
install:
  # Delete python from MSYS to avoid clashes
  - del %MSYS%\usr\bin\pydoc2
  - del %MSYS%\usr\bin\python2-config
  - del %MSYS%\usr\bin\python2.7-config
  - del %MSYS%\usr\bin\python2.7.exe 
  - del %MSYS%\usr\bin\python2.exe
   
  # Delete python27 to avoid clashes
  - del /s /q C:\python27 >nul 2>&1

  # Delete mingw-64 to avoid clashes
  - del /s /q C:\mingw-w64 >nul 2>&1

  # Delete gcc from MSYS to avoid clashes with mingw dcc, g++
  - del %MSYS%\usr\bin\gcc.exe
  - del %MSYS%\usr\bin\g++.exe

  - "SET MGW=%MSYS%\\mingw64"

  # Set to the Path variable binaries for linux like commands make, tar
  # and also add gcc, g++ support plus python, pip
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%MGW%\\bin;%MSYS%\\usr\\bin;%PATH%"
  
  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""
  - "pip --version"
  
  # Install the build and runtime dependencies of the project.
  - "pip install numpy scipy cvxopt cython nose scikit-learn setuptools wheel wheelhouse_uploader nose-timer"

  # Install pynauty (in a correct environment)
  # See: https://packaging.python.org/guides/supporting-windows-using-appveyor/
  - "python install_pynauty.py --venv --env_cmd \"%CMD_IN_ENV%\""
  
  # Check import of pynauty here and on env
  - "python %ENSURE_PYNAUTY%"

  # Install project
  - "%CMD_IN_ENV% python setup.py bdist_wheel bdist_wininst"
  - ps: "ls dist"
  
  # Install the generated wheel package to test it
  - "pip install --pre --no-index --find-links dist %PROJECT_NAME%"


# Not a .NET project, we build scikit-learn in the install step instead
build: false


artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: dist\*


on_success:
  # Upload the generated wheel package to Rackspace
  # On Windows, Apache Libcloud cannot find a standard CA cert bundle so we
  # disable the ssl checks.
  - "python -m wheelhouse_uploader upload provider=%CLOUD_STORAGE% --no-ssl-check --local-folder=dist %CLOUD_CONTAINER%"


test_script:
  # Change to a non-source folder to make sure we run the tests on the
  # installed library.
  - "mkdir empty_folder"
  - "cd empty_folder"

  - "python -c \"import nose; nose.main()\" --with-timer --timer-top-n 120 -s -v %MODULE%"

  # Move back to the project folder
  - "cd .."


cache:
  # Use the appveyor cache to avoid re-downloading large archives such
  # the MKL numpy and scipy wheels mirrored on a rackspace cloud
  # container, speed up the appveyor jobs and reduce bandwidth
  # usage on our rackspace account.
  - '%APPDATA%\pip\Cache'
