.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_wl_subtree_MUTAG.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_wl_subtree_MUTAG.py:


================================================================
Classification on the MUTAG dataset using the WL-subtree kernel.
================================================================

An example plot of :class:`grakel.GraphKernel`, :class:`grakel.WeisfeilerLehman`, :class:`grakel.VertexHistogram`



.. image:: /auto_examples/images/sphx_glr_plot_wl_subtree_MUTAG_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Accuracy: 84.21 % | Took: 0.07 s





|


.. code-block:: default

    from __future__ import print_function
    print(__doc__)

    from time import time

    from sklearn.metrics import accuracy_score
    from sklearn.model_selection import train_test_split
    from sklearn import svm

    from grakel import datasets
    from grakel import GraphKernel

    from matplotlib import pylab as pl

    # Loads the Mutag dataset from:
    # https://ls11-www.cs.tu-dortmund.de/staff/morris/graphkerneldatasets
    # the biggest collection of benchmark datasets for graph_kernels.
    mutag = datasets.fetch_dataset("MUTAG", verbose=False)
    G, y = mutag.data, mutag.target

    # Train-test split of graph data
    G_train, G_test, y_train, y_test = train_test_split(G, y, test_size=0.1, random_state=42)

    start = time()
    # Initialise a weifeiler kernel, with a dirac base_kernel.
    gk = GraphKernel(kernel=[{"name": "WL", "n_iter": 5}, "ST-WL"], normalize=True)

    # Calculate the kernel matrix.
    K_train = gk.fit_transform(G_train)
    K_test = gk.transform(G_test)
    end = time()

    # Initialise an SVM and fit.
    clf = svm.SVC(kernel='precomputed', C=1)
    clf.fit(K_train, y_train)

    # Predict and test.
    y_pred = clf.predict(K_test)

    # Calculate accuracy of classification.
    acc = accuracy_score(y_test, y_pred)

    print("Accuracy:", str(round(acc*100, 2)), "% | Took:",
          str(round(end - start, 2)), "s")

    fig = pl.figure()
    pl.subplot(121)
    pl.imshow(K_train)
    pl.subplot(122)
    pl.imshow(K_test)
    pl.show()



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.278 seconds)


.. _sphx_glr_download_auto_examples_plot_wl_subtree_MUTAG.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_wl_subtree_MUTAG.py <plot_wl_subtree_MUTAG.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_wl_subtree_MUTAG.ipynb <plot_wl_subtree_MUTAG.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
